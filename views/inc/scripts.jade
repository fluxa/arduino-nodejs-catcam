script(type='text/javascript', src='/js/jquery-1.8.2.min.js')
script(type='text/javascript', src='/js/bootstrap.min.js')
script(type='text/javascript', src='/socket.io/socket.io.js')
script(type='text/javascript')
	alerts = function(){};
	alerts.error = function(message){
		if($('#alerts'))
		{
			$('#alerts').html("<div class='alert alert-error fade in' onclick='$(\".alert\").alert(\"close\");'><button type='button' class='close' data-dismiss='alert'>×</button>"+message+"</div>");
			
		}
	}

	alerts.info = function(message){
		if($('#alerts')){
			$('#alerts').html("<div class='alert alert-info fade in' onclick='$(\".alert\").alert(\"close\");'><button type='button' class='close' data-dismiss='alert'>×</button>"+message+"</div>");
		}
	}

	function controls(cmd) {
		if(cmd == 'open'){
			$('#controls').html("<iframe id='controls-iframe' src='http://fluxa.bounceme.net:8080/remote.html'/>");
		} else if(cmd == 'close') {
			var c = $('#controls-iframe')[0];
			if(c) {
				c.parentNode.removeChild(c);
				c = null;
			}
		}
	}


	//Variables
	var presetsData = null,
		currentPanValue = 100, //default
		currentTiltValue = 100,
		isPickingPreset = false;

	//Sockets
	var socket;
	var socketid;
	var socketConnected = false;
	var stepMultiplier = 10;

	function onSendButton() {
		sendCommand($('#data').val());
		$('#data').val('');
	}

	function sendCommand(data) {
		if (socketConnected) {
			socket.emit('onSendCommand',data);
			alerts.info('last command sent: ' + data); 
		};
	}

	function sendStepCommand(cmd) {
		updateLocalValue(cmd);
		var cmd = cmd + '0' + stepMultiplier.toString();
		//alert(cmd);
		sendCommand(cmd);
	}

	function setStepMultiplier(val) {
		if (val < 100) {
			stepMultiplier = val;
		};
		//alert(stepMultiplier);
	}

	function toggleUI(enabled) {

	}

	//presets
	function onPreset(index) {
		if(isPickingPreset) {
			presetsData[index] = [currentPanValue,currentTiltValue];
			isPickingPreset = false;
			//save data
			socket.emit('onRedisData',presetsData);
		} else {
			
			var pVal = presetsData[index][0];
			var tVal = presetsData[index][1];
			var pSanit = (pVal >= 10) ? ( (pVal < 100) ? '0'+pVal.toString() : pVal.toString() ) : '00'+pVal.toString();
			var tSanit = (tVal >= 10) ? ( (tVal < 100) ? '0'+tVal.toString() : tVal.toString() ) : '00'+tVal.toString();
			
			sendCommand('P'+pSanit);
			sendCommand('T'+tSanit);
		}
	}

	function onPresetPick() {
		isPickingPreset = true;
		var blinkInterval = 0;
		blinkInterval = setInterval(function(){
			$('.presetbt').each(function(index,elem){

				if(!isPickingPreset) { //back to normal
					$(elem).removeClass('btn-warning').addClass('btn-info');
					clearInterval(blinkInterval);
					blinkInterval = null;
					return;
				}

				//blink
				if($(elem).hasClass('btn-info')){
					$(elem).removeClass('btn-info').addClass('btn-warning');
				} else {
					$(elem).removeClass('btn-warning').addClass('btn-info');
				}
			});

		},500);
	}

	function updateLocalValue(cmd) {
		switch(cmd) {
			case "L":
				currentPanValue -= stepMultiplier;
				if(currentPanValue < 0) currentPanValue = 0;
			case "R":
				currentPanValue += stepMultiplier;
				if(currentPanValue > 160) currentPanValue = 160;
			case "U":
				currentTiltValue += stepMultiplier;
				if(currentTiltValue > 160) currentTiltValue = 160;
			case "D":
				currentTiltValue -= stepMultiplier;
				if(currentTiltValue > 0) currentTiltValue = 0;
		}
	}

	function socketConnect()
	{
		
		if (!socketConnected) 
		{
			//connect socket
			console.log("socket connect!");

			if(!socket) //create socket
			{
				socket = io.connect();
				socket.on('onConnect', function (data) {

					socketConnected = true;
					socketid = data.socketid;
					toggleUI(true);

					alerts.info('socket connected!');

				});

				socket.on('disconnect', function(data){
					toggleUI(false);
					socketConnected = false;
					socketid = '';
				});

				socket.on('redisData', function(data){
					presetsData = data.data;
					alerts.info('redis data ready!');
				});
			}
			else //reconnect
			{
				socket.socket.connect();
			}
			
		}

	}

	//onready
	$(function(){

		socketConnect();


	});


